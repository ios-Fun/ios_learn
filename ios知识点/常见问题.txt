

NSAutoRealeasePool？？？

iOS面试题主要有：
1、多线程、特别是NSOperation 和 GCD 的内部原理。
2、运行时机制的原理和运用场景。
3、SDWebImage的原理。实现机制。如何解决TableView卡的问题。
4、block和代理的通知的区别。block的用法需要注意些什么。
5、strong，weak，retain，assign，copy nomatic 等的区别。
6、设计模式，mvc，单利，工厂，代理等的应用场景。
7、单利的写法。在单利中创建数组应该注意些什么。
8、NSString 的时候用copy和strong的区别。
9、响应值链。
10、NSTimer 在子线程中应该手动创建NSRunLoop ，否则不能循环执行。
11、UIScrollView和NSTimer组合做循环广告图轮播的时候有一个属性可以控制当上下滚动tableview的时候广告轮播图依然正常滚动。
12、Xcode最新的自动布局。
13、git ，和svn的用法，git的几个命令。
14、友盟报错可以查到具体某一行的错误，原理是什么。
15、Instrument  可以检测 电池的耗电量、和内存的消耗。的用法。
16、动画CABaseAnimation CAKeyAni….  CATrans…..  CAGoup….    。
17、ARC的原理。

1. 使用drawRect有什么影响？（这个可深可浅，你至少得用过。。）
drawRect方法依赖Core Graphics框架来进行自定义的绘制，但这种方法主要的缺点就是它处理touch事件的方式：每次按钮被点击后，都会用setNeedsDisplay进行强制重绘；而且不止一次，每次单点事件触发两次执行。这样的话从性能的角度来说，对CPU和内存来说都是欠佳的。特别是如果在我们的界面上有多个这样的UIButton实例。

drawRect会利用CPU生成offscreen bitmap，从而减轻GPU的绘制压力，用这种方式最UI可以将动画流畅性优化到极致，但缺点是绘制api复杂，offscreen cache增加内存开销。UI动画流畅性的优化主要平衡CPU和GPU的工作压力。

2. +(void)load; +(void)initialize；有什么用处？
+load()方法
那么当类被加载时它会自动被调用。
＋ load 会在 main() 函数之前被调用

+ initialize 方法类似一个懒加载，如果没有使用这个类，那么系统默认不会去调用这个方法，且默认只加载一次；
+ initialize 的调用发生在 +init 方法之前。。

3. viewWillLayoutSubView在什么时候调用？

4. https原理？

5. 使用masonry，使三个view 三等分排列？
 在storyboard中子view的X轴中心点相对于父view宽度1/6的位置，子view的multiplier值为3:1
具体计算公式如下：
1/6 * 2 = 1/3，然后倒过来的比例3:1

6. 类NSObject的那些方法经常被使用?

答：NSObject是Objetive-C的基类，其由NSObject类及一系列协议构成。

其中类方法alloc、class、 description 对象方法init、dealloc、– performSelector:withObject:afterDelay:等经常被使用

7.为什么其他语言里叫函数调用， objective c里则是给对象发消息?
1.检测这个 selector 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会 retain,release 这些函数了。
2.检测这个 target 是不是 nil 对象。ObjC 的特性是允许对一个 nil 对象执行任何一个方法不会 Crash，因为会被忽略掉。
3.如果上面两个都过了，那就开始查找这个类的 IMP，先从 cache 里面找，完了 找得到就跳到对应的函数去执行。
4.如果 cache 找不到就找一下方法分发表。
5.如果分发表找不到就到超类的分发表去找，一直找，直到找到NSObject类为止。
6.如果还找不到就要开始进入动态方法解析了，后面会提到。

后面还有：
动态方法解析resolveThisMethodDynamically
消息转发forwardingTargetForSelector

8. 麻烦你设计个简单的图片内存缓存器？

9. 讲讲你用Instrument优化动画性能的经历吧

10. 用过coredata或者sqlite吗？读写是分线程的吗？遇到过死锁没？咋解决的？
没用过sqlite是说不过去的。用过CoreData的肯定有很多血泪史要说。多谢线程模型你肯定做过比较选择。死锁是啥肯定也是要知道的，没遇到过至少能举个简单的例子来说明。单个线程可以死锁（main thread里dispatch_sync到main queue），多个线程直接也可以死锁（A，B线程互相持有对方需要的资源且互相等待

11. #import和#include有什么区别？@class呢？#import<>和#import”“有什么区别？
#import是Objective-C导入头文件的关键字，#include是C/C++导入头文件的关键字,
使用#import头文件会自动只导入一次，不会重复导入，相当于#include和#pragma once;
@class告诉编译器某个类的声明，当执行时，才去查看类的实现文件，可以解决头文件的相互包含;
#import<>用来包含系统的头文件，#import””用来包含用户头文件。

12. id声明的对象有什么特性？
id 声明的对象具有运行时的特性，即可以指向任意类型的objcetive-c的对象;
可以作为返回值，也可以声明对象。

13. OC如何对内存管理的，说说你的看法和解决方法。???
Objective-C的内存管理主要有三种方式ARC(自动内存计数)、手动内存计数、内存池。
　　1. 自动内存计数ARC：由Xcode自动在App编译阶段，在代码中添加内存管理代码。
　　2. 手动内存计数MRC：遵循内存谁申请，谁添加。谁释放的原则。
　　3. 内存释放池Release Pool：把需要释放的内存统一放在一个池子中，当池子被抽干后(drain)
　　  池子中所有的内存空间也被自动释放掉。 内存池的释放操作分为自动和手动。
　　   自动释放受runloop机制影响。
14. 请描述一下同步和异步，说说它们之间的区别。
参考答案：

首先，我们要明确一点，同步和异步都是在线程中使用的。在iOS开发中，比如网络请求数据时，若使用同步请求，则只有请求成功或者请求失败得到响应返回后，才能继续往下走，也就是才能访问其它资源（会阻塞了线程）。网络请求数据异步请求时，不会阻塞线程，在调用请求后，可以继续往下执行，而不用等请求有结果才能继续。

区别：

线程同步：是多个线程访问同一资源时，只有当前正在访问的线程访问结束之后，其他线程才能开始访问（被阻塞）。
线程异步：是多个线程在访问竞争资源时，可以在空闲等待时去访问其它资源（不被阻塞）。



72.关键字const有什么含意？修饰类呢?static的作用,用于类呢?还有extern c的作用

73. 关键字volatile有什么含意?并给出三个不同的例子。

74. 一个参数既可以是const还可以是volatile吗？ 一个指针可以是volatile 吗？解释为什么。

75 . static 关键字的作用：

77. 列举几种进程的同步机制，并比较其优缺点。

答： 原子操作 ?信号量机制 ? ?自旋锁 ? ?管程，会合，分布式系统

78. 进程之间通信的途径

答：共享存储系统消息传递系统管道：以文件系统为基础

79. 进程死锁的原因
答：资源竞争及进程推进顺序非法

80. 死锁的4个必要条件
答：互斥、请求保持、不可剥夺、环路

81. 死锁的处理
答：鸵鸟策略、预防策略、避免策略、检测与解除死锁

84. Objective-C的优缺点。

87. http和scoket通信的区别。

88. TCP和UDP的区别

95. 在一个对象的方法里面：self.name= “object”；和 name =”object” 有什么不同吗?

答：self.name =”object”：会调用对象的setName()方法；

name = “object”：会直接把object赋值给当前对象的name属性。

101. 控件主要响应3种事件
答：1). 基于触摸的事件 ; 2). 基于值的事件 ; 3).基于编辑的事件。

106. Cocoa Touch提供了哪几种Core Animation过渡类型？

答： Cocoa Touch 提供了 4 种 Core Animation 过渡类型，分别为：交叉淡化、推挤、显示和覆盖。

107. UIView与CLayer有什么区别？(经常问)


112. CFSocket使用有哪几个步骤。

答：创建 Socket 的上下文；创建 Socket ；配置要访问的服务器信息；封装服务器信息；连接服务器；

113. ?Core Foundation中提供了哪几种操作Socket的方法？

答： CFNetwork 、 CFSocket 和 BSD Socket 。

114. ?解析XML文件有哪几种方式？

答：以 DOM 方式解析 XML 文件；以 SAX 方式解析 XML 文件

1. viewController的生命周期。

2. autolay下的viewController的生命周期。

3. koc和kvo。

IBOutlet连出来的视图属性为什么可以被设置成weak?

2. 什么情况使用 weak 关键字，相比 assign 有什么不同？
a.在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性

b. 自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak；当然，也可以使用strong。

不同点：

weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。 而 assign 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 NSlnteger 等)的简单赋值操作。

assign 可以用非 OC 对象,而 weak 必须用于 OC 对象

3. 怎么用 copy 关键字？
a. NSString、NSArray、NSDictionary 等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary；

b. block 也经常使用 copy 关键字
block属性到底是用copy还是strong?????

4. 这个写法会出什么问题： @property (copy) NSMutableArray *array;
两个问题：1、添加,删除,修改数组内的元素的时候,程序会因为找不到对应的方法而崩溃.因为 copy 就是复制一个不可变 NSArray 的对象；2、使用了 atomic 属性会严重影响性能 ；

5. 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？
具体步骤：
需声明该类遵从 NSCopying 协议
实现 NSCopying 协议。该协议只有一个方法:
如何重写带 copy 关键字的 setter？?????

6. @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的????
@property = ivar + getter + setter;

每次在增加一个属性,系统都会在 ivar_list 中添加一个成员变量的描述,在 method_list 中增加 setter 与 getter 方法的描述,在属性列表中增加一个属性的描述。

7. @protocol 和 category 中如何使用 @property

协议使用属性？？？
在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性

8. runtime 如何实现 weak 属性????

原理：
runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil

9. @property 后面可以有哪些修饰符？
a. 原子性--- nonatomic和atomic
b. 读/写权限---readwrite(读写)、readonly (只读)
c. 内存管理语义---assign、strong、 weak、retain、copy
d. 方法名---getter=<name> 、setter=<name>

10. weak属性需要在dealloc中置nil么？

11. @synthesize和@dynamic分别有什么作用？
@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是@syntheszie var = _var;
@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。
@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）

12. ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？

对应基本数据类型默认关键字是

atomic,readwrite,assign

对于普通的 Objective-C 对象

atomic,readwrite,strong

13. 用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？
因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.
如果我们使用是 strong ,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.

14. OC中是如何实现线程同步的？

@synchronized: 添加同步锁
NSLock：加锁
NSCondition：加条件锁
dispatch_async(dispatch_get_main_queue(), ^{}); :异步主线程
NSOperationQueue：添加线程依赖
NSOperationQueue：设置最大并发数为1

15. TCP/IP建立连接的过程？
- 在TCP/IP 协议中，TCP协议提供可靠的连接服务，采用三次握手建立连接；
- 第一次握手：建立连接时，客户端发送连接请求到服务器，并进入SYN_SEND状态，等待服务器确认；
- 第二次握手：服务器收到客户端连接请求，向客户端发送允许连接应答，
  此时服务器进入SYN_RECV状态；
- 第三次握手：客户端收到服务器的允许连接应答，向服务器发送确认，客户端和服务器进入通信状态，
  完成三次握手。
 （所谓的三次握手，就是要有三次连接信息的发送、接收过程。
   TCP连的建立需要进行三次连接信息的发送、接收。）

1. 对非集合类对象的copy操作：

在非集合类对象中：对 immutable 对象进行 copy 操作，是指针复制，mutableCopy 操作时内容复制；对 mutable 对象进行 copy 和 mutableCopy 都是内容复制。用代码简单表示如下：

[immutableObject copy] // 浅复制
[immutableObject mutableCopy] //深复制
[mutableObject copy] //深复制
[mutableObject mutableCopy] //深复制

2、集合类对象的copy与mutableCopy
在集合类对象中，对 immutable 对象进行 copy，是指针复制， mutableCopy 是内容复制；对 mutable 对象进行 copy 和 mutableCopy 都是内容复制。但是：集合对象的内容复制仅限于对象本身，对象元素仍然是指针复制。

[immutableObject copy] // 浅复制
[immutableObject mutableCopy] //单层深复制
[mutableObject copy] //单层深复制
[mutableObject mutableCopy] //单层深复制

14. @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？
总结下 @synthesize 合成实例变量的规则，有以下几点：

如果指定了成员变量的名称,会生成一个指定的名称的成员变量,

如果这个成员已经存在了就不再生成了.

如果是 @synthesize foo; 还会生成一个名称为foo的成员变量，也就是说：

如果没有指定成员变量的名称会自动生成一个属性同名的成员变量,
如果是 @synthesize foo = _foo; 就不会生成成员变量了.


15. 在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？????

16. objc中向一个nil对象发送消息将会发生什么？
在 Objective-C 中向 nil 发送消息是完全有效的——只是在运行时不会有任何作用:

17. objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？
[obj foo];在objc动态编译时，会被转意为：objc_msgSend(obj, @selector(foo));。

18. 什么时候会报unrecognized selector的异常？
objc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，如果，在最顶层的父类中依然找不到相应的方法时，程序在运行时会挂掉并抛出异常unrecognized selector sent to XXX 。但是在这之前，objc的运行时会给出三次拯救程序崩溃的机会：

1. Method resolution

objc运行时会调用+resolveInstanceMethod:或者 +resolveClassMethod:，让你有机会提供一个函数实现。如果你添加了函数，那运行时系统就会重新启动一次消息发送的过程，否则 ，运行时就会移到下一步，消息转发（Message Forwarding）。

2. Fast forwarding

如果目标对象实现了-forwardingTargetForSelector:，Runtime 这时就会调用这个方法，给你把这个消息转发给其他对象的机会。 只要这个方法返回的不是nil和self，整个消息发送的过程就会被重启，当然发送的对象会变成你返回的那个对象。否则，就会继续Normal Fowarding。 这里叫Fast，只是为了区别下一步的转发机制。因为这一步不会创建任何新的对象，但下一步转发会创建一个NSInvocation对象，所以相对更快点。

3. Normal forwarding

这一步是Runtime最后一次给你挽救的机会。首先它会发送-methodSignatureForSelector:消息获得函数的参数和返回值类型。如果-methodSignatureForSelector:返回nil，Runtime则会发出-doesNotRecognizeSelector:消息，程序这时也就挂掉了。如果返回了一个函数签名，Runtime就会创建一个NSInvocation对象并发送-forwardInvocation:消息给目标对象。

19. 一个objc对象如何进行内存布局？（考虑有父类的情况）
Objective-C 对象的结构图
ISA指针
根类的实例变量
倒数第二层父类的实例变量
...
父类的实例变量
类的实例变量

20. 一个objc对象的isa的指针指向什么？有什么作用？

指向他的类对象,从而可以找到对象上的方法

21. 下面的代码输出什么？

    @implementation Son : Father
    - (id)init
    {
        self = [super init];
        if (self) {
            NSLog(@"%@", NSStringFromClass([self class]));
            NSLog(@"%@", NSStringFromClass([super class]));
        }
        return self;
    }
    @end

22. runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）
每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现.

23. 使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？???


24. objc中的类方法和实例方法有什么本质区别和联系？
类方法：

类方法是属于类对象的
类方法只能通过类对象调用
类方法中的self是类对象
类方法可以调用其他的类方法
类方法中不能访问成员变量
类方法中不能直接调用对象方法
实例方法：

实例方法是属于实例对象的
实例方法只能通过实例对象调用
实例方法中的self是实例对象
实例方法中可以访问成员变量
实例方法中直接调用实例方法
实例方法中也可以调用类方法(通过类名)


25. _objc_msgForward函数是做什么的，直接调用它将会发生什么？
_objc_msgForward是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，_objc_msgForward会尝试做消息转发。

26. runtime如何实现weak变量的自动置nil？

runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。

27. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？

不能向编译后得到的类中增加实例变量；
能向运行时创建的类中添加实例变量；
解释下：

因为编译后的类已经注册在 runtime 中，类结构体中的 objc_ivar_list 实例变量的链表 和 instance_size 实例变量的内存大小已经确定，同时runtime 会调用 class_setIvarLayout 或 class_setWeakIvarLayout 来处理 strong weak 引用。所以不能向存在的类中添加实例变量；

运行时创建的类是可以添加实例变量，调用 class_addIvar 函数。但是得在调用 objc_allocateClassPair 之后，objc_registerClassPair 之前，原因同上。

28. runloop和线程有什么关系？

总的说来，Run loop，正如其名，loop表示某种循环，和run放在一起就表示一直在运行着的循环。实际上，run loop和线程是紧密相连的，可以这样说run loop是为了线程而生，没有线程，它就没有存在的必要。Run loops是线程的基础架构部分， Cocoa 和 CoreFundation 都提供了 run loop 对象方便配置和管理线程的 run loop （以下都以 Cocoa 为例）。每个线程，包括程序的主线程（ main thread ）都有与之相应的 run loop 对象。

主线程的run loop默认是启动的。

iOS的应用程序里面，程序启动后会有一个如下的main()函数

int main(int argc, char * argv[]) {
@autoreleasepool {
    return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
}
}
重点是UIApplicationMain()函数，这个方法会为main thread设置一个NSRunLoop对象，这就解释了：为什么我们的应用可以在无人操作的时候休息，需要让它干活的时候又能立马响应。

对其它线程来说，run loop默认是没有启动的，如果你需要更多的线程交互则可以手动配置和启动，如果线程只是去执行一个长时间的已确定的任务则不需要。

在任何一个 Cocoa 程序的线程中，都可以通过以下代码来获取到当前线程的 run loop 。

NSRunLoop *runloop = [NSRunLoop currentRunLoop];

29. runloop的mode作用是什么？

model 主要是用来指定事件在运行循环中的优先级的，分为：

NSDefaultRunLoopMode（kCFRunLoopDefaultMode）：默认，空闲状态
UITrackingRunLoopMode：ScrollView滑动时
UIInitializationRunLoopMode：启动时
NSRunLoopCommonModes（kCFRunLoopCommonModes）：Mode集合
苹果公开提供的 Mode 有两个：

NSDefaultRunLoopMode（kCFRunLoopDefaultMode）
NSRunLoopCommonModes（kCFRunLoopCommonModes）

30. 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？

RunLoop只能运行在一种mode下，如果要换mode，当前的loop也需要停下重启成新的。利用这个机制，ScrollView滚动过程中NSDefaultRunLoopMode（kCFRunLoopDefaultMode）的mode会切换到UITrackingRunLoopMode来保证ScrollView的流畅滑动：只能在NSDefaultRunLoopMode模式下处理的事件会影响ScrollView的滑动。

如果我们把一个NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环中的时候, ScrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。

同时因为mode还是可定制的，所以：

Timer计时会被scrollView的滑动影响的问题可以通过将timer添加到NSRunLoopCommonModes（kCFRunLoopCommonModes）来解决。代码如下：

// 
// http://weibo.com/luohanchenyilong/ (微博@iOS程序犭袁)
// https://github.com/ChenYilong

//将timer添加到NSDefaultRunLoopMode中
[NSTimer scheduledTimerWithTimeInterval:1.0
     target:self
     selector:@selector(timerTick:)
     userInfo:nil
     repeats:YES];
//然后再添加到NSRunLoopCommonModes里
NSTimer *timer = [NSTimer timerWithTimeInterval:1.0
     target:self
     selector:@selector(timerTick:)
     userInfo:nil
     repeats:YES];
[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];

31. 猜想runloop内部是如何实现的？

一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑 是这样的：
function loop() {
    initialize();
    do {
        var message = get_next_message();
        process_message(message);
    } while (message != quit);
}

//伪代码
int main(int argc, char * argv[]) {
 //程序一直运行状态
 while (AppIsRunning) {
      //睡眠状态，等待唤醒事件
      id whoWakesMe = SleepForWakingUp();
      //得到唤醒事件
      id event = GetEvent(whoWakesMe);
      //开始处理事件
      HandleEvent(event);
 }
 return 0;
}

32. objc使用什么机制管理对象内存？

通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。

33. ARC通过什么方式帮助开发者管理内存？

34. 不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）????
分两种情况：手动干预释放时机、系统自动去释放。

手动干预释放时机--指定autoreleasepool 就是所谓的：当前作用域大括号结束时释放。
系统自动去释放--不手动指定autoreleasepool

下面对这张图进行详细的解释：

从程序启动到加载完成是一个完整的运行循环，然后会停下来，等待用户交互，用户的每一次交互都会启动一次运行循环，来处理用户所有的点击事件、触摸事件。

我们都知道： 所有 autorelease 的对象，在出了作用域之后，会被自动添加到最近创建的自动释放池中。

但是如果每次都放进应用程序的 main.m 中的 autoreleasepool 中，迟早有被撑满的一刻。这个过程中必定有一个释放的动作。何时？

在一次完整的运行循环结束之前，会被销毁。

那什么时间会创建自动释放池？运行循环检测到事件并启动后，就会创建自动释放池。

子线程的 runloop 默认是不工作，无法主动创建，必须手动创建。

自定义的 NSOperation 和 NSThread 需要手动创建自动释放池。比如： 自定义的 NSOperation 类中的 main 方法里就必须添加自动释放池。否则出了作用域后，自动释放对象会因为没有自动释放池去处理它，而造成内存泄露。

但对于 blockOperation 和 invocationOperation 这种默认的Operation ，系统已经帮我们封装好了，不需要手动创建自动释放池。

@autoreleasepool 当自动释放池被销毁或者耗尽时，会向自动释放池中的所有对象发送 release 消息，释放自动释放池中的所有对象。

如果在一个vc的viewDidLoad中创建一个 Autorelease对象，那么该对象会在 viewDidAppear 方法执行前就被销毁了。

35. BAD_ACCESS在什么情况下出现？

访问了野指针，比如对一个已经释放的对象执行了release、访问已经释放对象的成员变量或者发消息。 死循环

36. 苹果是如何实现autoreleasepool的？

autoreleasepool 以一个队列数组的形式实现,主要通过下列三个函数完成.

objc_autoreleasepoolPush
objc_autoreleasepoolPop
objc_autorelease
看函数名就可以知道，对 autorelease 分别执行 push，和 pop 操作。销毁对象时执行release操作。

37. 使用block时什么情况会发生引用循环，如何解决？

一个对象中强引用了block，在block中又强引用了该对象，就会发射循环引用。

解决方法是将该对象使用__weak或者__block修饰符修饰之后再在block中使用。

id weak weakSelf = self; 或者 weak __typeof(&*self)weakSelf = self该方法可以设置宏
id __block weakSelf = self;
或者将其中一方强制制空 xxx = nil。

38. 在block内如何修改block外部变量？
默认情况下，在block中访问的外部变量是复制过去的，即：写操作不对原变量生效。但是你可以加上 __block 来让其写操作生效

Block不允许修改外部变量的值，这里所说的外部变量的值，指的是栈中指针的内存地址。__block 所起到的作用就是只要观察到该变量被 block 所持有，就将“外部变量”在栈中的内存地址放到了堆中。进而在block内部也可以修改外部变量的值。

39. 使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？

但如果你使用一些参数中可能含有 ivar 的系统 api ，如 GCD 、NSNotificationCenter就要小心一点：比如GCD 内部如果引用了 self，而且 GCD 的其他参数是 ivar，则要考虑到循环引用：

__weak __typeof__(self) weakSelf = self;
dispatch_group_async(_operationsGroup, _operationsQueue, ^
{
__typeof__(self) strongSelf = weakSelf;
[strongSelf doSomething];
[strongSelf doSomethingElse];
} );

40. GCD的队列（dispatch_queue_t）分哪两种类型？

串行队列Serial Dispatch Queue
并行队列Concurrent Dispatch Queue

41. 如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）

dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
dispatch_group_t group = dispatch_group_create();
dispatch_group_async(group, queue, ^{ /*加载图片1 */ });
dispatch_group_async(group, queue, ^{ /*加载图片2 */ });
dispatch_group_async(group, queue, ^{ /*加载图片3 */ }); 
dispatch_group_notify(group, dispatch_get_main_queue(), ^{
        // 合并图片
});

42. dispatch_barrier_async的作用是什么？

43. 苹果为什么要废弃dispatch_get_current_queue？

dispatch_get_current_queue容易造成死锁

44. 
dispatch_sync(dispatch_get_main_queue(), ^{
        NSLog(@"2");
    });
    NSLog(@"3");

45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？

observeValueForKeyPath

46. 如何手动触发一个value的KVO   ?????

47. 若一个类有实例变量 NSString *_foo ，调用setValue:forKey:时，可以以foo还是 _foo 作为key？

都可以。

48. KVC的keyPath中的集合运算符如何使用？?????

必须用在集合对象上或普通对象的集合属性上
简单集合运算符有@avg， @count ， @max ， @min ，@sum，
格式 @"@sum.age"或 @"集合属性.@max.age"

49. KVC和KVO的keyPath一定是属性么？ ????

KVC 支持实例变量，KVO 只能手动支持手动设定实例变量的KVO实现监听

50. 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？  ?????

51. apple用什么方式实现对一个对象的KVO？  ????

willChangeValueForKey

didChangevlueForKey

52. IBOutlet连出来的视图属性为什么可以被设置成weak? ????

因为既然有外链那么视图在xib或者storyboard中肯定存在，视图已经对它有一个强引用了。

不过这个回答漏了个重要知识，使用storyboard（xib不行）创建的vc，会有一个叫_topLevelObjectsToKeepAliveFromStoryboard的私有数组强引用所有top level的对象，所以这时即便outlet声明成weak也没关系


53. IB中User Defined Runtime Attributes如何使用？   ?????

它能够通过KVC的方式配置一些你在interface builder 中不能配置的属性。当你希望在IB中作尽可能多得事情，这个特性能够帮助你编写更加轻量级的viewcontroller

54. 如何调试BAD_ACCESS错误

重写object的respondsToSelector方法，现实出现EXEC_BAD_ACCESS前访问的最后一个object
通过 Zombie  enter image description here

设置全局断点快速定位问题代码所在行

Xcode 7 已经集成了BAD_ACCESS捕获功能：Address Sanitizer。 用法如下：在配置中勾选: :Enable Address Sanitizer enter image description here

55. lldb（gdb）常用的调试命令？

breakpoint 设置断点定位到某一个函数
n 断点指针下一步
po打印对象

