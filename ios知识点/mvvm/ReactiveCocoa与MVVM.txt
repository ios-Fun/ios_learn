http://www.tuicool.com/articles/rI7ZNn


AOP:


MVP???

MVVM：Model-view-view model

解决ViewController过于臃肿，做到ViewController能够复用

方法：
1. 将拼装控件的逻辑，分离到另外一个类中。
2. 将数据获取和转换的逻辑分别到另外一个类中。
3. 将 UITableView 的 Data Source 分离到另外一个类中。

构造 ViewModel？？？

在此，我们可以定义一个好的架构应该具备的特点：

任务均衡分摊给具有清晰角色的实体

可测试性通常都来自与上一条（对于一个合适的架构是非常容易）

易用性和低成本维护

直到进行 单元测试 的时候才会发现问题越来越明显。因为你的ViewController和View是紧密耦合的，对它们进行测试就显得很艰难-

专门构造存储类

MVVM缺点：
第一点：数据绑定使得 Bug 很难被调试。你看到界面异常了，有可能是你 View 的代码有 Bug，也可能是 Model 的代码有问题。数据绑定使得一个位置的 Bug 被快速传递到别的位置，要定位原始出问题的地方就变得不那么容易了。
第二点：对于过大的项目，数据绑定需要花费更多的内存。




